{{{
package com.patni.utils;

import java.io.Serializable;
import java.util.Calendar;
import com.sun.org.apache.xerces.internal.impl.xpath.regex.RegularExpression;

public class Date implements Serializable,Comparable<Date>
{
    private static final long serialVersionUID = 1L;
    
    int intDay;
    int intMonth;
    int intYear;
    static final int MIN_YEAR = 1900;
    static final int MAX_YEAR = 2050;
    boolean isLeapYear = false;
    
    public Date()
    {
        this.intDay = 1;
        this.intMonth = 1;
        this.intYear = MIN_YEAR;
        this.isLeapYear = Date.isLeapYear(this.intYear);
    }
    
    public Date(int intDay, int intMonth, int intYear)
    {
        this.intDay = intDay;
        this.intMonth = intMonth;
        this.intYear = intYear;
        this.isLeapYear = Date.isLeapYear(intYear);
    }
    
    public Date(Calendar date)
    {
        this.intDay = date.get(Calendar.DAY_OF_MONTH);
        this.intMonth = date.get(Calendar.MONTH)+1;
        this.intYear = date.get(Calendar.YEAR);
        this.isLeapYear = Date.isLeapYear(intYear);
    }

    public static Date getInstance(String date)
    {
    	RegularExpression re = new RegularExpression("^(0?[1-9]||[12][0-9]||3[01])[/-](0?[1-9]||1[012])[/-]([0-9]{4})$");
    	Date d = new Date();
    	
    	if(re.matches(date))
    	{
    		date = date.replaceAll("-", "/");
    		System.out.print("Match Found");
    		String[] values = date.split("/");
    		
    		int day = Integer.parseInt(values[0]);
    		int month = Integer.parseInt(values[1]);
    		int year = Integer.parseInt(values[2]);
    		
    		if(!(Date.validateYear(year)))
    		{
    			System.out.print("year is invalid");
    			// Year is invalid
    			return null;
    		}
    		
    		if(!(Date.validateMonth(month)))
			{
    			System.out.print("month is invalid");
    			// Month is invalid
    			return null;
			}
    		
    		if(!(Date.validateDay(day,month,year)))
    		{
    			System.out.print("date is invalid");
    			// Date is invalid
    			return null;
    		}
    		
    		// All the things are valid. Lets prepare the date
    		d.setYear(year);
    		d.setMonth(month);
    		d.setDay(day);
    		
    		return d;
    	}
    	else
    	{
    		System.out.print("Unable to match");
    	}
    	return null;
    }
    
    public static void main(String args[])
    {
    	for(int i=1; i<32; i++)
    	{
    		String sd = i+"/12/2009";
    		Date d = Date.getInstance(sd);
        	if(d != null)
        	{
        		System.out.println("  "+sd+" ------------- Converted to "+d.toString("/"));
        	}
        	else
        	{
        		System.out.println("   "+sd+" ------------- Not Converted ");
        	}
        	
        	
    	}
    	
    }
    
    /**
     * Gets the Year value stored in to the Date object 
     * @return Year - Year value stored into the Date object
     */
    public int getYear()
    {
        return intYear;
    }

    /**
     * Sets the Year value for the Date Object. Need to be called first
     * @param intYear - Year value to be set for the object
     * @return True or False indicating if the Year value was set after validation
     * 
     * Note : Please set the values in this order - Year, Month and Date
     */
    public boolean setYear(int intYear)
    {
        boolean isValid = Date.validateYear(intYear); 
        
        if(isValid)
        {
            // Valid Year. Set the Year Value and set if its a leap year or not.
            this.intYear = intYear;
            this.isLeapYear = Date.isLeapYear(intYear);
        }
        
        return isValid;
    }
    
    /**
     * Gets the Month value stored in to the Date object 
     * @return Month - Month value stored into the Date object
     */
    public int getMonth()
    {
        return intMonth;
    }

    /**
     * Sets the Month value for the Date Object. Called after setting the Year
     * @param intMonth - Month value to be set for the object
     * @return True or False indicating if the Month value was set after validation
     * 
     * Note : Please set the values in this order - Year, Month and Date
     */
    public boolean setMonth(int intMonth)
    {
        
        boolean isValid = Date.validateMonth(intMonth); 
        
        if(isValid)
        {
            this.intMonth = intMonth;
        }
        
        return isValid;
    }
    
    
    /**
     * Gets the Day value stored in to the Date object 
     * @return Day - Month value stored into the Date object
     */
    public int getDay()
    {
        return intDay;
    }

    /**
     * Sets the Day value for the Date Object. Called after setting the both Month and Year
     * @param intDay - Day value to be set for the object
     * @return True or False indicating if the Day value was set after validation
     * 
     * Note : Please set the values in this order - Year, Month and Date
     */
    public boolean setDay(int intDay)
    {
        
        boolean isValid = Date.validateDay(intDay,this.intMonth,this.intYear); 
        
        if(isValid)
        {
            this.intDay = intDay;
        }
        
        return isValid;
    }
    
    public String toString()
    {
        return this.intDay + "/" + this.intMonth + "/" + this.intYear;
    }
    
    public String toString(String delimiter)
    {
        return this.intDay + delimiter + this.intMonth + delimiter + this.intYear;
    }
    
    public String toString(String delimiter,boolean shortMonth)
    {
        String strMonth = "JANUARY";
        switch (intMonth)
        {
        	case 1: break;	// Already initialized to January
        	case 2: strMonth	 = "FEBRUARY"; break;
        	case 3: strMonth	 = "MARCH"; break;
        	case 4: strMonth	 = "APRIL"; break;
        	case 5: strMonth	 = "MAY"; break;
        	case 6: strMonth 	 = "JUNE"; break;
        	case 7: strMonth 	 = "JULY"; break;
        	case 8: strMonth 	 = "AUGUST"; break;
        	case 9: strMonth 	 = "SEPTEMBER"; break;
        	case 10: strMonth 	 = "OCTOBER"; break;
        	case 11: strMonth 	 = "NOVEMBER"; break;
        	case 12: strMonth  	 = "DECEMBER"; break;
        }
        if(shortMonth)
        {
        	return this.intDay + delimiter + strMonth.substring(0,3) + delimiter + this.intYear;
        }
        else
        {
        	return this.intDay + delimiter + strMonth + delimiter + this.intYear;
        }
    }
    
    /**
     * Checks if the Year is valid year or not
     * @param Year - Year to be validated
     * @return if the Year is in range MIN_YEAR and MAX_YEAR or not
     */
    public static boolean validateYear(int Year)
    {
        /* Check if the month is in valid range or not */
        if((Year < MIN_YEAR) || (Year > MAX_YEAR))
        {
            return false;
        }
        
        return true;
    }
   
    /**
     * Checks if the Month is valid or not
     * @param Month
     * @return true or false based on the Month value. True if the value falls within [1-12]
     */
    public static boolean validateMonth(int Month)
    {
        /* Check if the month is in valid range or not */
        if((Month < 1)|| (Month > 12))
        {
            return false;
        }
        
        return true;
    }
    
    /**
     * 
     * @param Day - The Day value being validated
     * @return True or False if the Day is valid.
     */
    public static boolean validateDay(int Day, int intMonth, int intYear)
    {
        int Total_Days = Date.getDaysInMonth(intMonth, intYear);
        
        if((Day < 1) || (Day > Total_Days))
        {
            return false;
        }
        
        return true;
    }
    
    /**
     * Checks if the Year is a Leap Year or not
     * @param Year
     * @return
     */
    public static boolean isLeapYear(int Year)
    {
        boolean leapYear = false;
        /* Check if the Year is divisible by 4 or not */
        if(Year%4 == 0)
        {
            // Now check if the year is divisible by 100 or not
            if(Year%100 == 0)
            {
                // The year is divisible by 100. It should also be divisible by 400 to be a leap year
                if(Year%400 == 0)
                {
                    // The year is also divisible by 400. Its a speical leap year
                    leapYear = true;
                }
            }
            else
            {
                // The year is not divisible by 100. Its a normal leap year
                leapYear = true;
            }
        }

        return leapYear;
    }
    
    /**
     * Gets the total number of months in the Month specified. This method must be called after the date values have been set into the date object
     * @param Month 1-12 specifying the numeric representation for the Month
     * @param Year  Year of the Month. Required for leap year month values
     * @return returns the total number of days in the specified month
     */
    public static int getDaysInMonth(int Month, int Year)
    {
        int Days = 0;
        switch (Month)
        {
            case 1:
            case 3:
            case 5:
            case 7:
            case 8:
            case 10:
            case 12: Days = 31; break;
            case 4:
            case 6:
            case 9:
            case 11: Days = 30; break;
            case 2:
                if(Date.isLeapYear(Year))
                {
                    Days = 29;
                }
                else
                {
                    Days = 28;
                }
                break;
        }
        
        return Days;
    }
    
    public boolean equals(Date d)
    {
        if(this.intDay != d.intDay)
        {
            return false;
        }
        else if(this.intMonth != d.intMonth)
        {
            return false;
        }
        else if(this.intYear != d.intYear)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

	public int compareTo(Date o)
	{
		if(this.intYear > o.intYear)
		{
			// Our date is greater than the provided date
			return 1;
		}
		else if(this.intYear < o.intYear)
		{
			// Our date is smaller than the provided one
			return -1;
		}
		else
		{
			if(this.intMonth > o.intMonth)
			{
				// Our date is greater than the provided one
				return 1;
			}
			else if(this.intMonth < o.intMonth)
			{
				// Our date is smaller than the provided one
				return -1;
			}
			else
			{
				if(this.intDay > o.intDay)
				{
					// Our date is greater than the provided one
					return 1;
				}
				else if(this.intDay < o.intDay)
				{
					// Our date is smaller than the provided one
					return -1;
				}
				else
				{
					// Both the dates are same
					return 0;
				}
			}
		}
	}
}

}}}