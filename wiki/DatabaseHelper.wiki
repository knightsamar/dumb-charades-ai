#labels Phase-Deploy
{{{
package com.patni.utils;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.CallableStatement;
import java.sql.SQLException;
import javax.sql.DataSource;
import org.apache.log4j.Logger;

/**
 * <div style="font:12px 'Verdana';">DatabaseHelper class provides the various inbuilt operations for working with Database. This classes uses the 
 * core libraries for Oracle database and hence works with Oracle Database 9i.<br/><br/>
 * 
 * For working of this Utility class you need to have following jar files included in your classpath.<br/>
 *  &bull; classes12.jar - <DRIVE>\oracle\ora92\jdbc\lib\classes12.jar<br/>
 *  &bull; ocrs.jar      - <DRIVE>\oracle\ora92\jdbc\lib\ocrs.jar<br/>
 *  &bull; ojdbc.jar     - <DRIVE>\oracle\ora92\jdbc\lib\ojdbc.jar<br/>
 * 
 * <br/>It uses a configuration file for initialization for the connection. Here is a sample configuration file<br/>
 * 
 * <br/>Limitations.
 * <ul>
 * <li><strike>As all the methods are static, you cannot use it to get connections from multiple databases at the same time. Although, at different times, you can configure the Helper for multiple databases using multiple configuration files that you provide to it.</strike></li>
 * <li>All queries have to be built by the user explicitly. No provision is added for Parameterized queries as of now.</li>
 * 
 *  
 * @author Deepak Shakya
 * @version 1.0
 * @date 21-11-2009
 * </div>
 */

public class DatabaseHelper
{
    /**
     * Stores the connections in a pool.
     */
    private DataSource databasePool = null;
    
    /**
     * Determines whether this Helper has been configured for Database services or not
     */
    private boolean isInitialized = false;
    
    
    /**
     * Logger to be used for logging the Database operation errors.
     */
    private Logger databaseLogger = null;
    
    /**
     * Configures this instance of the DatabaseHelper with dbPool and dbLogger 
     * @param dbPool   - DatabasePool which this instance will use to interact with the database.
     * @param dbLogger - Logs the Database related errors using the logger
     * @return TRUE this instance is configured successfully.
     */
    public boolean Configure(DataSource dbPool, Logger dbLogger)
    {
    	boolean operation_result = false;
    	
    	if(!(isInitialized))
    	{
    	    databasePool = dbPool;         // Save the dataSource instance
    	    databaseLogger = dbLogger;     // Save the Logger Instance
    		
    	    // Our DatabaseHelper is configured for usage
    	    isInitialized = true;
		}
    	else
    	{
    		operation_result = true;
    	}
        
    	return operation_result;
    }

    
    /**
     * Gets the Connection Instance for the configured Database. It should be called after the configuring the
     * database.
     * 
     * @return Connection Instance for the configured database. null otherwise
     */
    public Connection getConnection()
    {
        Connection conn = null;
        
        // Check if the DataSource has been configured or not
        if(isInitialized)
        {
            // DataSource has been configured. Get the Connection Instance
            try
            {
                conn = databasePool.getConnection();
            }
            catch(SQLException e)
            {
                System.out.println("SQL ERROR : "+e.getMessage());
                databaseLogger.error("SQL ERROR : "+e.getMessage());
            }
            catch(Exception e)
            {
                System.out.println("ERROR : "+e.getMessage());
                databaseLogger.error("ERROR : "+e.getMessage());
            }
        }
        else
        {
            System.out.println("DataSource is not configured. Please configure the database using Configure() first to get a connection instance.");
            databaseLogger.error("DataSource is not configured. Please configure the database using Configure() first to get a connection instance.");
        }
        
        // Return the connection instance for the configured DataSource. null is returns otherwise
        return conn;
    }
    
    /**
     * Sets the mark that the statements to be executed using the Connection Instance conn will be done under the
     * same transaction till the next notification with endTransaction()
     * 
     * @param conn - Connection Instance which performs wants to execute queries in one transaction
     * @return TRUE if the conn was successfully marked for transaction operation
     */
    public boolean startTransaction(Connection conn)
    {
        boolean operation_result = false;
        
        // Check if the DataSource has been configured or not
        if(isInitialized)
        {
            // DataSource has been configured.
            try
            {
                // Set the Auto-Commit option for the given connection to false
                conn.setAutoCommit(false);
                operation_result = true;
            }
            catch(SQLException e)
            {
                System.out.println("SQL ERROR : "+e.getMessage());
                databaseLogger.error("SQL ERROR : "+e.getMessage());
            }
            catch(Exception e)
            {
                System.out.println("ERROR : "+e.getMessage());
                databaseLogger.error("ERROR : "+e.getMessage());
            }
        }
        else
        {
            System.out.println("DataSource is not configured. Please configure the database using Configure() first");
            databaseLogger.error("DataSource is not configured. Please configure the database using Configure() first");
        }
        
        return operation_result;
    }
    
    /**
     * Rolls back the operations done by the conn instance on the database.
     * 
     * @param conn - Connection Instance which wants to rollback the operations
     * @return TRUE if the conn operations were rollbacked successfully
     */
    public boolean rollbackTransaction(Connection conn)
    {
        boolean operation_result = false;
        
        // Check if the DataSource has been configured or not
        if(isInitialized)
        {
            // DataSource has been configured.
            try
            {
                // Rollback the changes made to the database
                conn.rollback();
                operation_result = true;
            }
            catch(SQLException e)
            {
                System.out.println("SQL ERROR : "+e.getMessage());
                databaseLogger.error("SQL ERROR : "+e.getMessage());
            }
            catch(Exception e)
            {
                System.out.println("ERROR : "+e.getMessage());
                databaseLogger.error("ERROR : "+e.getMessage());
            }
        }
        else
        {
            System.out.println("DataSource is not configured. Please configure the database using Configure() first");
            databaseLogger.error("DataSource is not configured. Please configure the database using Configure() first");
        }
        
        return operation_result;
    }
    
    /**
     * Sets the mark that the statements to be executed using the Connection Instance conn will no longer be done
     * under the same transaction till the next notification with startTransaction()
     * 
     * @param conn - Connection Instance which wants to terminate the transaction successfully
     * @return TRUE if the changes made by the conn in the database were commited successfully
     * 
     * Note: Queries executed after endTransaction will not be a part of the transaction and will be auto-commited  
     */
    public boolean endTransaction(Connection conn)
    {
        boolean operation_result = false;
        
        // Check if the DataSource has been configured or not
        if(isInitialized)
        {
            // DataSource has been configured.
            try
            {
                // Commit the changes made by the conn instance and set Auto-Commit to false
                conn.commit();
                conn.setAutoCommit(true);
                operation_result = true;
            }
            catch(SQLException e)
            {
                System.out.println("SQL ERROR : "+e.getMessage());
                databaseLogger.error("SQL ERROR : "+e.getMessage());
            }
            catch(Exception e)
            {
                System.out.println("ERROR : "+e.getMessage());
                databaseLogger.error("ERROR : "+e.getMessage());
            }
        }
        else
        {
            System.out.println("DataSource is not configured. Please configure the database using Configure() first");
            databaseLogger.error("DataSource is not configured. Please configure the database using Configure() first");
        }
        
        return operation_result;
    }
    
    /**
     * Executes the Data Definition Language(DDL) query on the database and returns the operation result of the query
     * Allowed DDL queries are - CREATE, ALTER, DROP, TRUNCATE
     * 
     * @param conn - Connection Instance on which the DDL operation has to be performed
     * @param query - DDL query that needs to be executed on the conn
     * @return - TRUE if the query was executed successfully. FALSE otherwise. Check ERROR_MESSAGE for details of failure
     */
    public boolean doDDLQuery(Connection conn, String query)
    {
        boolean operation_result = false;
        
        // Check if the DataSource has been configured or not
        if(isInitialized)
        {
            // DataSource has been configured.
            
            // Check if the User Provides only DDL Queries here.
            String query_type = query.substring(0, 5).replaceAll(" ", "").toUpperCase();
            if(query_type.equals("CREAT") || query_type.equals("ALTER") || query_type.equals("DROP") || query_type.equals("TRUNC"))
            {
                // Found a Valid Query. Execute the Query
                try
                {
                    Statement s = conn.createStatement();                    
                    s.execute(query);
                    s.close();
                    operation_result = true;
                }
                catch(SQLException e)
                {
                    System.out.println("SQL ERROR : "+e.getMessage());
                    databaseLogger.error("SQL ERROR : "+e.getMessage());
                }
                catch(Exception e)
                {
                    System.out.println("ERROR : "+e.getMessage());
                    databaseLogger.error("ERROR : "+e.getMessage());
                }  
            }
            else
            {
                // This is an invalid Query. Inform the user about it.
                System.out.println("Query doesn't contain DDL operation. Cannot perform the requested operation.");
                databaseLogger.error("Query doesn't contain DDL operation. Cannot perform the requested operation.");
            }
        }
        else
        {
            System.out.println("DataSource is not configured. Please configure the database using Configure() first");
            databaseLogger.error("DataSource is not configured. Please configure the database using Configure() first");
        }
        
        // Return the result of the DDL Query
        return operation_result;
    }
    
    /**
     * Executes the Data Manipulation Language(DDL) query on the database and returns the total number of rows
     * affected with the successful execution of the DML query. 
     * Allowed DML queries are - INSERT,UPDATE,DELETE
     * 
     * @param conn - Connection Instance on which the DML operation has to be performed
     * @param query - DML query that needs to be executed on the conn
     * @return - Number of affected rows for successful execution of DML query in integer. -1 if the query fails to execute 
     */
    public int doDMLQuery(Connection conn, String query)
    {
        int rows_affected = -1;
        
        // Check if the DataSource has been configured or not
        if(isInitialized)
        {
            // DataSource has been configured.
            
            // Check if the User Provides only DML Queries here.
            String query_type = query.substring(0, 6).replaceAll(" ", "").toUpperCase();
            if(query_type.equals("INSERT") || query_type.equals("UPDATE") || query_type.equals("DELETE"))
            {
                // Found a Valid Query. Execute the Query
                try
                {
                    Statement s = conn.createStatement();                    
                    rows_affected = s.executeUpdate(query);
                    s.close();
                }
                catch(SQLException e)
                {
                    System.out.println("SQL ERROR : "+e.getMessage());
                    databaseLogger.error("SQL ERROR : "+e.getMessage());
                }
                catch(Exception e)
                {
                    System.out.println("ERROR : "+e.getMessage());
                    databaseLogger.error("ERROR : "+e.getMessage());
                }  
            }
            else
            {
                // This is an invalid Query. Inform the user about it.
                System.out.println("Query doesn't contain DML operation. Cannot perform the requested operation.");
                databaseLogger.error("Query doesn't contain DML operation. Cannot perform the requested operation.");
            }
        }
        else
        {
            System.out.println("DataSource is not configured. Please configure the database using Configure() first");
            databaseLogger.error("DataSource is not configured. Please configure the database using Configure() first");
        }
        
        // Return the result of the DDL Query
        return rows_affected;
    }
    
    /**
     * Executes the SELECT query on the database and returns the matching rows for the successful execution of the query. 
     * 
     * @param conn - Connection Instance on which the query has to be executed
     * @param query - SELECT query that needs to be executed on the conn
     * @return - Returns the rows fetched for the SELECT query. NULL if the query fails to execute
     * 
     * Note : The ResultSet obtained is read-only and also can be traversed from both directions. That is, the 
     * cursor can be moved in both direction in the resultset
     */
    public ResultSet doSelectQuery(Connection conn, String query)
    {
        ResultSet rs = null;
        
        // Check if the DataSource has been configured or not
        if(isInitialized)
        {
            // DataSource has been configured.
            
            // Check if the User Provides only SELECT Queries here.
            String query_type = query.substring(0, 6).replaceAll(" ", "").toUpperCase();
            if(query_type.equals("SELECT"))
            {
                // Found a Valid Query. Execute the Query
                try
                {
                    Statement s = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);                    
                    rs = s.executeQuery(query);
                    //s.close();
                }
                catch(SQLException e)
                {
                    System.out.println("SQL ERROR : "+e.getMessage());
                    databaseLogger.error("SQL ERROR : "+e.getMessage());
                }
                catch(Exception e)
                {
                    System.out.println("ERROR : "+e.getMessage());
                    databaseLogger.error("ERROR : "+e.getMessage());
                }  
            }
            else
            {
                // This is an invalid Query. Inform the user about it.
                System.out.println("Query doesn't contain SELECT operation. Cannot perform the requested operation.");
                databaseLogger.error("Query doesn't contain SELECT operation. Cannot perform the requested operation.");
            }
        }
        else
        {
            System.out.println("DataSource is not configured. Please configure the database using Configure() first");
            databaseLogger.error("DataSource is not configured. Please configure the database using Configure() first");
        }
        
        // Return the result of the DDL Query
        return rs;
    }
    
    /**
     * Executes a stored procedure in the DataBase.
     * 
     * @param conn Connection Instance on which the stored procedure needs to be executed
     * @param query Query that determines the stored procedure to be executed.
     * @return TRUE if the Stored procedure was executed successfully.
     */
    public boolean executeProcedure(Connection conn,String query)
    {
        boolean operation_result = false;
        
        // Check if the DataSource has been configured or not
        if(isInitialized)
        {
            // DataSource has been configured.
            try
            {
                // We need a CallableStatement to execute a Stored Procedure
                CallableStatement cs = conn.prepareCall("{ "+query+" }");
                cs.execute();
                cs.close();
                operation_result = true;
            }
            catch(SQLException e)
            {
                System.out.println("SQL ERROR : "+e.getMessage());
                databaseLogger.error("SQL ERROR : "+e.getMessage());
            }
            catch(Exception e)
            {
                System.out.println("ERROR : "+e.getMessage());
                databaseLogger.error("ERROR : "+e.getMessage());
            }
        }
        else
        {
            System.out.println("DataSource is not configured. Please configure the database using Configure() first");
            databaseLogger.error("DataSource is not configured. Please configure the database using Configure() first");
        }
        
        return operation_result;
    }
    
    /**
     * Closes the Connection of conn Instance with the Database.
     * 
     * @param conn - Connection Instance which will be closed
     * @return TRUE if the Connection was terminated successfully, commiting the changes made to the database
     */
    public boolean closeConnection(Connection conn)
    {
        boolean operation_result = false;
        
        // Check if the DataSource has been configured or not
        if(isInitialized)
        {
            // DataSource has been configured.
            try
            {
                // Commit the changes made by the conn instance and close the connection
            	if(!(conn.getAutoCommit()))
            	{
            		conn.commit();
            	}
                conn.close();
            }
            catch(SQLException e)
            {
                System.out.println("SQL ERROR : "+e.getMessage());
                databaseLogger.error("SQL ERROR : "+e.getMessage());
            }
            catch(Exception e)
            {
                System.out.println("ERROR : "+e.getMessage());
                databaseLogger.error("ERROR : "+e.getMessage());
            }
            finally
            {
                // Set the conn to null.
                conn = null;
                operation_result = true;
            }
        }
        else
        {
            System.out.println("DataSource is not configured. Please configure the database using Configure() first");
            databaseLogger.error("DataSource is not configured. Please configure the database using Configure() first");
        }
        
        return operation_result;
    }
}

}}}